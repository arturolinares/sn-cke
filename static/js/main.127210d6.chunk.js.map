{"version":3,"sources":["components/Editor.tsx","reportWebVitals.ts","index.tsx"],"names":["HtmlElementId","HtmlClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","text","keyMap","Map","defaultEditorConfig","toolbar","items","language","Editor","props","editorKit","componentDidMount","configureEditorKit","delegate","EditorKitDelegate","setEditorRawText","setState","clearUndoHistory","getElementsBySelector","EditorKit","mode","supportsFilesafe","saveText","saveNote","onEditorValueChanged","error","console","log","onBlur","e","onFocus","onKeyDown","set","key","get","preventDefault","onKeyUp","delete","handleInputChange","debounce","event","editor","getData","state","this","config","data","onChange","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAMYA,EAKAC,E,wCCGGC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,kFDHFH,K,2BAAAA,E,qBAAAA,M,cAKAC,K,2BAAAA,E,uCAAAA,M,KASZ,IAAMU,EAAe,CACnBC,KAAM,IAGJC,EAAS,IAAIC,IAEXC,EAAsB,CAC1BC,QAAS,CACPC,MAAO,CACL,UACA,IACA,OACA,SACA,YACA,OACA,WACA,YACA,aACA,YACA,OACA,eACA,IACA,WACA,eACA,eACA,IACA,UACA,SACA,iBACA,IACA,cACA,qBACA,uBACA,IACA,aACA,cACA,YACA,aACA,OACA,SAGJC,SAAU,MAGSC,E,kDAGnB,WAAYC,GAAyB,IAAD,8BAClC,cAAMA,IAHRC,eAEoC,IAKpCC,kBAAoB,WAClB,EAAKC,sBAN6B,EASpCA,mBAAqB,WACnB,IAAIC,EAAW,IAAIC,oBAAkB,CAEnCC,iBAAkB,SAACd,GACjB,EAAKe,SAAS,CACZf,UAGJgB,iBAAkB,aAClBC,sBAAuB,iBAAM,MAG/B,EAAKR,UAAY,IAAIS,YAAU,CAC7BN,SAAUA,EACVO,KAAM,OACNC,kBAAkB,KAxBc,EA4BpCC,SAAW,SAACrB,GACV,EAAKsB,SAAStB,GACd,EAAKe,SAAS,CACZf,UA/BgC,EAmCpCsB,SAAW,SAACtB,GAIV,IACE,EAAKS,UAAUc,qBAAqBvB,GACpC,MAAOwB,GACPC,QAAQC,IAAI,qBAAsBF,KA1CF,EA8CpCG,OAAS,SAACC,KA9C0B,EAgDpCC,QAAU,SAACD,KAhDyB,EAkDpCE,UAAY,SAACF,GACX3B,EAAO8B,IAAIH,EAAEI,KAAK,GAEd/B,EAAOgC,IAAI,YAAchC,EAAOgC,IAAI,MACtCL,EAAEM,kBAtD8B,EA0DpCC,QAAU,SAACP,GACT3B,EAAOmC,OAAOR,EAAEI,MA3DkB,EA8DpCK,kBAAoBC,oBAAS,SAACC,EAAYC,GACxC,EAAKnB,SAASmB,EAAOC,aACpB,KA9DD,EAAKC,MAAQ3C,EAFqB,E,qDAkE1B,IACAC,EAAS2C,KAAKD,MAAd1C,KACR,OACE,cAAC,WAAD,CACEwC,OAAQA,IACRI,OAAQzC,EACR0C,KAAM7C,EACN8C,SAAUH,KAAKN,wB,GA5EaU,IAAMC,W,ME1D1CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B/D,M","file":"static/js/main.127210d6.chunk.js","sourcesContent":["import React from 'react';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\nimport editor from 'ckeditor5-custom-build/build/ckeditor';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport { debounce } from 'lodash';\n\nexport enum HtmlElementId {\n  snComponent = 'sn-component',\n  textarea = 'textarea',\n}\n\nexport enum HtmlClassName {\n  snComponent = 'sn-component',\n  textarea = 'sk-input contrast textarea',\n}\n\nexport interface EditorInterface {\n  text: string;\n}\n\nconst initialState = {\n  text: '',\n};\n\nlet keyMap = new Map();\n\nconst defaultEditorConfig = {\n  toolbar: {\n    items: [\n      'heading',\n      '|',\n      'bold',\n      'italic',\n      'underline',\n      'link',\n      'fontSize',\n      'highlight',\n      'fontFamily',\n      'codeBlock',\n      'code',\n      'removeFormat',\n      '|',\n      'todoList',\n      'bulletedList',\n      'numberedList',\n      '|',\n      'outdent',\n      'indent',\n      'horizontalLine',\n      '|',\n      'imageUpload',\n      'toggleImageCaption',\n      'imageTextAlternative',\n      '|',\n      'blockQuote',\n      'insertTable',\n      'htmlEmbed',\n      'mediaEmbed',\n      'undo',\n      'redo',\n    ],\n  },\n  language: 'en',\n};\n\nexport default class Editor extends React.Component<{}, EditorInterface> {\n  editorKit: any;\n\n  constructor(props: EditorInterface) {\n    super(props);\n    this.state = initialState;\n  }\n\n  componentDidMount = () => {\n    this.configureEditorKit();\n  };\n\n  configureEditorKit = () => {\n    let delegate = new EditorKitDelegate({\n      /** This loads every time a different note is loaded */\n      setEditorRawText: (text: string) => {\n        this.setState({\n          text,\n        });\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'html',\n      supportsFilesafe: false,\n    });\n  };\n\n  saveText = (text: string) => {\n    this.saveNote(text);\n    this.setState({\n      text,\n    });\n  };\n\n  saveNote = (text: string) => {\n    /** This will work in an SN context, but breaks the standalone editor,\n     * so we need to catch the error\n     */\n    try {\n      this.editorKit.onEditorValueChanged(text);\n    } catch (error) {\n      console.log('Error saving note:', error);\n    }\n  };\n\n  onBlur = (e: React.FocusEvent) => {};\n\n  onFocus = (e: React.FocusEvent) => {};\n\n  onKeyDown = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.set(e.key, true);\n    // Do nothing if 'Control' and 's' are pressed\n    if (keyMap.get('Control') && keyMap.get('s')) {\n      e.preventDefault();\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.delete(e.key);\n  };\n\n  handleInputChange = debounce((event: any, editor: any) => {\n    this.saveText(editor.getData());\n  }, 500);\n\n  render() {\n    const { text } = this.state;\n    return (\n      <CKEditor\n        editor={editor}\n        config={defaultEditorConfig}\n        data={text}\n        onChange={this.handleInputChange}\n      />\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nimport Editor from './components/Editor';\nimport './stylesheets/main.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}